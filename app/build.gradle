plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "fi.teamog.steppsapp"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'joda-time:joda-time:2.9.9'
    def fragment_version = "1.5.3"
    implementation "androidx.fragment:fragment:$fragment_version"
}

android.applicationVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "${rootProject.name} API Documentation (${project.android.defaultConfig.versionName})"
        group = "Documentation"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath())
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude "**/R"
        exclude "**/R.**"
        exclude "**/R\$**"
        exclude "**/BuildConfig*"

        options {
            encoding = "utf-8"
            docEncoding = "utf-8"
            windowTitle = "${rootProject.name} API Documentation (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PRIVATE
            linkSource = false
            author = true
            version = true
            use = true

            links("https://developer.android.com/reference")
            linksOffline("https://developer.android.com/reference",
                    "https://d.android.com/reference/androidx")
        }

        destinationDir = new File(getBuildDir(), "outputs/javadoc/${variant.dirName}")

        doLast {
            println("Javadoc generated at ${destinationDir}")
        }
    }
}